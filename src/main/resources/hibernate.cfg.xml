<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
<session-factory>
<!-- Configuración de conexión a la base de datos -->
<property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
<property name="connection.url">jdbc:mysql://localhost/futboldb</property>
<property name="connection.username">root</property>
<property name="connection.password"></property>
<!-- Pool de conexiones JDBC (se usa la que viene por defecto) -->
<property name="connection.pool_size">1</property>
<!-- Dialecto SQL -->
<property name="dialect">org.hibernate.dialect.MySQL57Dialect</property>
<!-- Muestra en la consola todas las consultas SQL ejecutadas -->
<property name="show_sql">false</property>
<!--Valores Posibles 
validate: validate that the schema matches, make no changes to the schema of the database, you probably want this for production.
update: update the schema to reflect the entities being persisted
create: creates the schema necessary for your entities, destroying any previous data.
create-drop: create the schema as in create above, but also drop the schema at the end of the session. This is great in early development or for testing.-->

 <property name="hbm2ddl.auto">validate</property> 
<!-- Mapea las siguientes clases anotadas si trabajásemos con mapeo XML en lugar de class
pondríamos resource -->

<mapping class="app.Liga" /> 
<mapping class="app.Futbolista" />
<mapping class="app.Equipo" />
<mapping class="app.Contrato" /> 
<!--

<mapping class="futbolistas" /> 
<mapping class="equiposobservaciones" />  

-->

 

<!--la siguiente linea solo en el caso de usar mapeo con ficheros xml -->
<!-- <mapping resource="Persona.hbm.xml"/> -->

</session-factory>
</hibernate-configuration>